(define env0
  `((+ . ,+) (- . ,-) (* . ,*) (/ . ,/)
    (apply . ,apply)
    (assq  . ,assq)
    (car   . ,car)
    (cdr   . ,cdr)
    (cons  . ,cons)
    (eq?   . ,eq?)
    (list  . ,list)
    (map   . ,map)
    (memv  . ,memv)
    (null? . ,null?)
    (pair? . ,pair?)
    (read  . ,read)
    (symbol?  . ,symbol?)
    (call/cc  . ,call/cc)
    (set-car! . ,set-car!)
    (set-cdr! . ,set-cdr!)))
(define ext-env
  (lambda (vars vals env)
    (cond
     ((null? vars) env)
     ((symbol? vars) (cons (cons vars vals) env))
     (else (cons (cons (car vars) (car vals))
                 (ext-env (cdr vars) (cdr vals) env))))))
(define lookup
  (lambda (var env)
    (cdr (assq var env))))
(define assign
  (lambda (var val env)
    (set-cdr! (assq var env) val)))
(define interp
  (lambda (exp env)
    (cond
     ((symbol? exp) (lookup exp env))
     ((pair? exp)
      (case (car exp)
        ((quote) (cadr exp))
        ((lambda)
         (lambda vals
           (let ((env (ext-env (cadr exp) vals env)))
             (let loop ((exps (cddr exp)))
                  (if (null? (cdr exps))
                      (interp (car exps) env)
                      (begin (interp (car exps) env)
                             (loop (cdr exps))))))))
        ((if)
         (if (interp (cadr exp) env)
             (interp (caddr exp) env)
             (interp (cadddr exp) env)))
        ((set!)
         (assign (cadr exp)
                 (interp (caddr exp) env)
                 env))
        (else
         (apply (interp (car exp) env)
                (map (lambda (x) (interp x env)) (cdr exp))))))
     (else exp))))
(define meta
  (lambda (exp)
    (interp exp env0)))
